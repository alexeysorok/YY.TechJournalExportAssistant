<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Query_CreateTable_EventDataStorage" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS EventData
(
    TechJournalLog LowCardinality(String),
    DirectoryName LowCardinality(String),
    FileName LowCardinality(String),
    Id Int64 Codec(DoubleDelta, LZ4),
    Period DateTime Codec(Delta, LZ4),
    Level Int64 Codec(DoubleDelta, LZ4),
    Duration Int64 Codec(DoubleDelta, LZ4),
    DurationSec Int64 Codec(DoubleDelta, LZ4),
    EventName LowCardinality(String),
    ServerContextName LowCardinality(String),
    ProcessName LowCardinality(String),
    SessionId Int64 Codec(DoubleDelta, LZ4),
    ApplicationName LowCardinality(String),
    ClientId Int64 Codec(DoubleDelta, LZ4),
    ComputerName LowCardinality(String),
    SourceServerName LowCardinality(String),
    ConnectionId Int64 Codec(DoubleDelta, LZ4),
    UserName LowCardinality(String),
    ApplicationId Int64 Codec(DoubleDelta, LZ4),
    Context String Codec(ZSTD),
    ActionType LowCardinality(String),
    Database LowCardinality(String),
    DatabaseCopy LowCardinality(String),
    DBMS LowCardinality(String),
    DatabasePid LowCardinality(String),
    PlanSQLText String Codec(ZSTD),
    Rows Int64 Codec(DoubleDelta, LZ4),
    RowsAffected Int64 Codec(DoubleDelta, LZ4),
    SQLText String Codec(ZSTD),
    SQLQueryOnly String Codec(ZSTD),
    SQLQueryParametersOnly String Codec(ZSTD),
    SQLQueryHash String Codec(ZSTD),
    SDBL String Codec(ZSTD),
    Description String Codec(ZSTD),
    Message String Codec(ZSTD),
    CustomEventData String Codec(ZSTD)
)
engine = MergeTree()
PARTITION BY toYYYYMM(Period)
PRIMARY KEY Period
ORDER BY Period
SETTINGS index_granularity = 8192;</value>
    <comment>Создание таблицы для хранения данных технологического журнала</comment>
  </data>
  <data name="Query_CreateTable_LogFilesStorage" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS LogFiles
(
	TechJournalLog LowCardinality(String),
	DirectoryName LowCardinality(String),
	Id Int64 DEFAULT (toUnixTimestamp64Milli(now64())*1000000 + rowNumberInAllBlocks()) Codec(DoubleDelta, LZ4),
	FileName LowCardinality(String),
	CreateDate DateTime Codec(Delta, LZ4),
	ModificationDate DateTime Codec(Delta, LZ4),
	LastEventNumber Int64 Codec(DoubleDelta, LZ4),
	LastCurrentFileData LowCardinality(String),
	LastStreamPosition Int64 Codec(DoubleDelta, LZ4)
)
engine = MergeTree()
PARTITION BY toYYYYMM(CreateDate)
PRIMARY KEY CreateDate
ORDER BY CreateDate
SETTINGS index_granularity = 8192;</value>
    <comment>Создание таблицы для хранения данных лога обработки файлов</comment>
  </data>
  <data name="Query_GetActualPositions" xml:space="preserve">
    <value>SELECT 
    l.TechJournalLog, 
    l.DirectoryName, 
    l.Id, 
    l.FileName, 
    l.CreateDate, 
    l.ModificationDate, 
    l.LastEventNumber, 
    l.LastCurrentFileData, 
    l.LastStreamPosition
FROM LogFiles l

INNER JOIN

(
SELECT
	TechJournalLog,
	DirectoryName,
    MAX(Id) LastId
FROM LogFiles AS LF_LAST
WHERE LF_LAST.TechJournalLog = {techJournalLog:String}
GROUP BY TechJournalLog,
	DirectoryName
) lglast

ON l.TechJournalLog = lglast.TechJournalLog 
	AND l.DirectoryName = lglast.DirectoryName 
	AND l.Id = lglast.LastId
ORDER BY l.DirectoryName</value>
    <comment>Получение последних событий</comment>
  </data>
</root>